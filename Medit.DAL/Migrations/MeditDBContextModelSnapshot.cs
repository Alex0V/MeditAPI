// <auto-generated />
using System;
using Medit.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Medit.DAL.Migrations
{
    [DbContext(typeof(MeditDBContext))]
    partial class MeditDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Medit.DAL.Entities.CompletedSession", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SessionСounter")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("CompletedSessions");
                });

            modelBuilder.Entity("Medit.DAL.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("S3UrlAudio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionGroupId")
                        .HasColumnType("int");

                    b.Property<string>("SessionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SessionGroupId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SessionGroupId = 1,
                            SessionName = "The Big Idea"
                        },
                        new
                        {
                            Id = 2,
                            SessionGroupId = 1,
                            SessionName = "Homebase"
                        },
                        new
                        {
                            Id = 3,
                            SessionGroupId = 1,
                            SessionName = "Pop Out of Your Thoughts"
                        },
                        new
                        {
                            Id = 4,
                            SessionGroupId = 1,
                            SessionName = "Inner Smoothness"
                        },
                        new
                        {
                            Id = 5,
                            SessionGroupId = 1,
                            SessionName = "Take the Power Back"
                        },
                        new
                        {
                            Id = 6,
                            SessionGroupId = 2,
                            SessionName = "Introduction"
                        },
                        new
                        {
                            Id = 7,
                            SessionGroupId = 2,
                            SessionName = "Dealing with Change and Uncertainty"
                        },
                        new
                        {
                            Id = 8,
                            SessionGroupId = 2,
                            SessionName = "Combating Loneliness"
                        },
                        new
                        {
                            Id = 9,
                            SessionGroupId = 2,
                            SessionName = "Getting Through a Hectic Day"
                        },
                        new
                        {
                            Id = 10,
                            SessionGroupId = 2,
                            SessionName = "Dealing with Negativity in the World"
                        },
                        new
                        {
                            Id = 11,
                            SessionGroupId = 2,
                            SessionName = "Easing Holiday Stress"
                        });
                });

            modelBuilder.Entity("Medit.DAL.Entities.SessionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("S3UrlFoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SessionGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2023, 6, 4, 12, 13, 25, 27, DateTimeKind.Local).AddTicks(2383),
                            GroupName = "Mindfulness for Beginners",
                            S3UrlFoto = "foto1"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2023, 6, 4, 12, 13, 25, 29, DateTimeKind.Local).AddTicks(2090),
                            GroupName = "Mindfulness Tools",
                            S3UrlFoto = "foto2"
                        });
                });

            modelBuilder.Entity("Medit.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ResetPasswordExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Medit.DAL.Entities.CompletedSession", b =>
                {
                    b.HasOne("Medit.DAL.Entities.Session", "Sessions")
                        .WithMany("CompletedSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medit.DAL.Entities.User", "User")
                        .WithMany("СompletedSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sessions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Medit.DAL.Entities.Session", b =>
                {
                    b.HasOne("Medit.DAL.Entities.SessionGroup", "SessionGroup")
                        .WithMany("Sessions")
                        .HasForeignKey("SessionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionGroup");
                });

            modelBuilder.Entity("Medit.DAL.Entities.Session", b =>
                {
                    b.Navigation("CompletedSessions");
                });

            modelBuilder.Entity("Medit.DAL.Entities.SessionGroup", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Medit.DAL.Entities.User", b =>
                {
                    b.Navigation("СompletedSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
